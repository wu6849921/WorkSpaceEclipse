function QU_BeforeLoad(type, form) {	if (type == 'copy') {		RenewPurchasePrice(type, form);		nlapiSetFieldValue('custbody_so_num', null, true);		var context = nlapiGetContext();		var usageRemaining = context.getRemainingUsage();		nlapiLogExecution("DEBUG", "usageRemaining", usageRemaining);	}	return true;}function QU_BeforeSubmit(type, form) {	if (type == 'create') {		RenewColumn();		var context = nlapiGetContext();		var usageRemaining = context.getRemainingUsage();		nlapiLogExecution("DEBUG", "usageRemaining", usageRemaining);	}	// charles alerts othercharge remainder.	var itemcount = nlapiGetLineItemCount('item');	if (nlapiGetFieldValue('subsidiary') == '5'			|| nlapiGetFieldValue('subsidiary') == '8') {		for (var i = 1; i <= itemcount; i++) {			nlapiSelectLineItem('item', i);			if (nlapiGetCurrentLineItemValue('item', 'item') == '11653'					|| nlapiGetCurrentLineItemValue('item', 'item') == '11654') {				nlapiSetFieldValue('custbody108', 'T');			}		}	}}function QU_AfterSubmit() {	try {		var OldRec = nlapiGetOldRecord();		var OldProject = OldRec.getFieldValue('job');		var Rec = nlapiGetNewRecord();		var Project = Rec.getFieldValue('job');		var classid = Rec.getFieldValue('class');		if (classid != '51') {			if (OldProject != Project) {				UploadFields(OldProject);				UploadFields(Project);			} else {				UploadFields(Project);			}		}	} catch (e) {		var Rec = nlapiGetNewRecord();		var Project = Rec.getFieldValue('job');		var classid = Rec.getFieldValue('class');		if (classid != '51') {			UploadFields(Project);		}	}	var context = nlapiGetContext();	var usageRemaining = context.getRemainingUsage();	nlapiLogExecution("DEBUG", "usageRemaining", usageRemaining);}// 20120412 kyle to upload costs from main quotation to job page according to// david setofunction UploadFields(Project) {	var symbol = nlapiGetFieldText('custbody16'); // 20180521 by klaus	if (symbol == '-') {		var value = -1;	} else {		var value = 1;	}	nlapiLogExecution("DEBUG", "start");	// 20121220 upload gp and contract values so far	var Filtes1 = new Array();	Filtes1[0] = new nlobjSearchFilter('internalid', null, 'anyof', Project);	Filtes1[1] = new nlobjSearchFilter('mainline', 'transaction', 'is', 'T');	Filtes1[2] = new nlobjSearchFilter('status', 'transaction', 'is',			'Estimate:B');	// Filtes1[3]=new	// nlobjSearchFilter('recordtype','transaction','is','estimate');	var Results1 = new Array();	Results1[0] = new nlobjSearchColumn('internalid', null, 'group');	Results1[1] = new nlobjSearchColumn('custbody_gp_f_s', 'transaction', 'sum');	Results1[2] = new nlobjSearchColumn('custbody_tcost', 'transaction', 'sum');	Results1[3] = new nlobjSearchColumn('custbody_contract_p', 'transaction',			'sum');	var SearchResult1 = nlapiSearchRecord('job', null, Filtes1, Results1);	nlapiLogExecution("DEBUG", 'SearchResult1', SearchResult1.length);	if (SearchResult1 != null) {		var fields = [ 'custentity_gp_so_far',				'custentity_contract_total_so_far' ];		var vals = [				parseFloat(SearchResult1[0].getValue(Results1[1])),				parseFloat(SearchResult1[0].getValue(Results1[2]))						+ parseFloat(SearchResult1[0].getValue(Results1[3])) ];		nlapiSubmitField('job', Project, fields, vals);		// nlapiSubmitField('job', Project, 'custentity_gp_so_far',		// parseFloat(SearchResult1[0].getValue(Results1[1])));		// nlapiSubmitField('job', Project, 'custentity_contract_total_so_far',		// (parseFloat(SearchResult1[0].getValue(Results1[2])) +		// parseFloat(SearchResult1[0].getValue(Results1[3]))));	}	// david seto 20120425 the new job page plan	var Filtes = new Array();	Filtes[0] = new nlobjSearchFilter('internalid', null, 'anyof', Project);	Filtes[1] = new nlobjSearchFilter('mainline', 'transaction', 'is', 'T');	Filtes[2] = new nlobjSearchFilter('custbody_contract_approved_by_finance',			'transaction', 'is', '1');	Filtes[3] = new nlobjSearchFilter('recordtype', 'transaction', 'is',			'estimate');	var Results = new Array();	Results[0] = new nlobjSearchColumn('internalid', null, 'group');	Results[1] = new nlobjSearchColumn('custbody_materials_cost',			'transaction', 'sum');	// sub_contractor_cost	Results[2] = new nlobjSearchColumn('custbody71', 'transaction', 'sum');	Results[3] = new nlobjSearchColumn('custbody_alarm_m_c', 'transaction',			'sum');	// travel	Results[4] = new nlobjSearchColumn('custbody73', 'transaction', 'sum');	// misc	Results[5] = new nlobjSearchColumn('custbody72', 'transaction', 'sum');	Results[6] = new nlobjSearchColumn('custbody_commissionamount',			'transaction', 'sum');	Results[7] = new nlobjSearchColumn('custbody_i_e_l_c', 'transaction', 'sum');	Results[8] = new nlobjSearchColumn('custbody_e_b_c', 'transaction', 'sum');	Results[9] = new nlobjSearchColumn('custbody_f_y_a_c', 'transaction', 'sum');	Results[10] = new nlobjSearchColumn('custbody_second_y_a_c', 'transaction',			'sum');	Results[11] = new nlobjSearchColumn('custbody_t_s_b_c', 'transaction',			'sum');	Results[12] = new nlobjSearchColumn('custbody_bank_cost', 'transaction',			'sum');	Results[13] = new nlobjSearchColumn('custbody_tcost', 'transaction', 'sum');	Results[14] = new nlobjSearchColumn('custbody_contract_p', 'transaction',			'sum'); // value _ klaus	Results[15] = new nlobjSearchColumn('custbody_import_tax_cost',			'transaction', 'sum');	Results[16] = new nlobjSearchColumn('custbody_logistic_cost',			'transaction', 'sum');	Results[17] = new nlobjSearchColumn('custbody_gp_f_s', 'transaction', 'sum');	Results[18] = new nlobjSearchColumn('total', 'transaction', 'sum');	var SearchResult = nlapiSearchRecord('job', null, Filtes, Results);	/*	 * //set contract total value with tax var f =[]; f[0] = new	 * nlobjSearchFilter('internalid', 'customer', 'is', nlapiGetRecordId());	 * var results = nlapiSearchRecord('transaction',	 * 'customsearch_contract_total_tax', f); if(!results){ return;	 * nlapiLogExecution('debug', 'debug', '1'); }else{ var contractSum = 0;	 * for(var i = 0; i < results.length; i++){ var cols =	 * results[i].getAllColumns(); contractSum += results[i].getValue(cols[1]); }	 * 	 * //set invoice total var filters = []; filters[0] = new	 * nlobjSearchFilter("internalid", 'customer', 'is', nlapiGetRecordId());//	 * 写要加的条件 var rts = nlapiSearchRecord('transaction',	 * 'customsearch_invoice_total', filters);	 * 	 * if (rts==''||rts== null) { return; nlapiLogExecution('debug', 'debug',	 * '1'); } else {	 * 	 * var InvoiceSum = 0; for (var i = 0; i < rts.length; i++) { var cols =	 * rts[i].getAllColumns(); InvoiceSum += rts[i].getValue(cols[1]); }	 * 	 */	if (SearchResult != null) {		nlapiLogExecution('debug', 'total', parseFloat(SearchResult[0]				.getValue(Results[18])));		nlapiLogExecution("DEBUG", "calculation");		var fields = [];		var vals = [];		fields[0] = 'custentity_materials_cost';		fields[1] = 'custentity_sub_contractor_cost';		fields[2] = 'custentity_alarm_m_c';		fields[3] = 'custentity_travel_cost';		fields[4] = 'custentity_misc_cost';		fields[5] = 'custentity_commissionamount';		fields[6] = 'custentity_i_e_l_c';		fields[7] = 'custentity_e_b_c';		fields[8] = 'custentity_f_y_a_c';		fields[9] = 'custentity_second_y_a_c';		fields[10] = 'custentity_t_s_b_c';		fields[11] = 'custentity_bank_cost';		fields[12] = 'custentity_tcost';		fields[13] = 'custentity_contract_p';		fields[14] = 'custentity_net_margin_p';		fields[15] = 'custentity_contract_total';		fields[16] = 'custentity_import_tax_cost';		fields[17] = 'custentity_logistic_cost';		fields[18] = 'custentity_gp_forsales';		// fields[19] = 'custentity301';		// fields[20] = 'custentity300';		vals[0] = parseFloat(SearchResult[0].getValue(Results[1]));		vals[1] = parseFloat(SearchResult[0].getValue(Results[2]));		vals[2] = parseFloat(SearchResult[0].getValue(Results[3]));		vals[3] = parseFloat(SearchResult[0].getValue(Results[4]));		vals[4] = parseFloat(SearchResult[0].getValue(Results[5]));		vals[5] = parseFloat(SearchResult[0].getValue(Results[6]));		vals[6] = parseFloat(SearchResult[0].getValue(Results[7]));		vals[7] = parseFloat(SearchResult[0].getValue(Results[8]));		vals[8] = parseFloat(SearchResult[0].getValue(Results[9]));		vals[9] = parseFloat(SearchResult[0].getValue(Results[10]));		vals[10] = parseFloat(SearchResult[0].getValue(Results[11]));		vals[11] = parseFloat(SearchResult[0].getValue(Results[12]));		vals[12] = parseFloat(SearchResult[0].getValue(Results[13]));		vals[13] = parseFloat(SearchResult[0].getValue(Results[14]));		var npMargin = (100 * parseFloat(SearchResult[0].getValue(Results[14])) / (parseFloat(SearchResult[0]				.getValue(Results[14])) + parseFloat(SearchResult[0]				.getValue(Results[13])))).toFixed(2).toString();		nlapiLogExecution('debug', 'npMargin', npMargin);		if (isNaN(npMargin) || npMargin == '-Infinity') {			vals[14] = 0;		} else {			vals[14] = npMargin + '%';		}		vals[15] = parseFloat(SearchResult[0].getValue(Results[13]))				+ parseFloat(SearchResult[0].getValue(Results[14])); // value		// _		// klaus		vals[16] = parseFloat(SearchResult[0].getValue(Results[15]));		vals[17] = parseFloat(SearchResult[0].getValue(Results[16]));		vals[18] = parseFloat(SearchResult[0].getValue(Results[17]));		// vals[19] = parseFloat(contractSum);		// vals[20] = parseFloat(InvoiceSum);		nlapiSubmitField('job', Project, fields, vals);		// charles for update the job progerss and date according the approved		// main quotation.		var f = new Array();		f[0] = new nlobjSearchFilter('internalid', null, 'anyof', Project);		f[1] = new nlobjSearchFilter('mainline', 'transaction', 'is', 'T');		f[2] = new nlobjSearchFilter('custbody_contract_approved_by_finance',				'transaction', 'is', '1');		f[3] = new nlobjSearchFilter('recordtype', 'transaction', 'is',				'estimate');		f[4] = new nlobjSearchFilter('custbody_main_quotation', 'transaction',				'is', '1');		f[5] = new nlobjSearchFilter('custbody_j_t', 'transaction', 'anyof', [				'1', '21' ]);		var c = new Array();		c[0] = new nlobjSearchColumn('internalid', null, 'group');		var rts = nlapiSearchRecord('job', null, f, c);		nlapiLogExecution('debug', 'debug', rts);		if (rts != null) {			/*			 * var approvedate = rts.c[0]; for(var i=1;i<=rts.length;i++){			 * //var appooved_date = rts.c[0]; if(approvedate<=rts.c[i]){			 * approvedate=approvedate; }else{ approvedate=rts.c[i]; } }			 * nlapiSubmitField('job', Project, ['custentity41','custentity53'],			 * [2,approvedate]);			 */			// charles for update the job status			if (nlapiLookupField('job', Project, 'entitystatus') == '4') {				nlapiSubmitField('job', Project, 'entitystatus', '2');			}		}		/*		 * //nlapiSubmitField('job', Project,		 * 'custentity_project_main_quotation', nlapiGetFieldValue('tranid'));		 * nlapiSubmitField('job', Project, 'custentity_materials_cost',		 * parseFloat(SearchResult[0].getValue(Results[1])));		 * nlapiSubmitField('job', Project, 'custentity_sub_contractor_cost',		 * parseFloat(SearchResult[0].getValue(Results[2])));		 * nlapiSubmitField('job', Project, 'custentity_alarm_m_c',		 * parseFloat(SearchResult[0].getValue(Results[3])));		 * nlapiSubmitField('job', Project, 'custentity_travel_cost',		 * parseFloat(SearchResult[0].getValue(Results[4])));		 * nlapiSubmitField('job', Project, 'custentity_misc_cost',		 * parseFloat(SearchResult[0].getValue(Results[5])));		 * nlapiSubmitField('job', Project, 'custentity_commissionamount',		 * parseFloat(SearchResult[0].getValue(Results[6])));		 * nlapiSubmitField('job', Project, 'custentity_i_e_l_c',		 * parseFloat(SearchResult[0].getValue(Results[7])));		 * nlapiSubmitField('job', Project, 'custentity_e_b_c',		 * parseFloat(SearchResult[0].getValue(Results[8])));		 * nlapiSubmitField('job', Project,		 * 'custentity_f_y_a_c',parseFloat(SearchResult[0].getValue(Results[9])));		 * nlapiSubmitField('job', Project,		 * 'custentity_second_y_a_c',parseFloat(SearchResult[0].getValue(Results[10])));		 * nlapiSubmitField('job', Project, 'custentity_t_s_b_c',		 * parseFloat(SearchResult[0].getValue(Results[11])));		 * nlapiSubmitField('job', Project, 'custentity_bank_cost',		 * parseFloat(SearchResult[0].getValue(Results[12]))); var		 * TotalCost=parseFloat(SearchResult[0].getValue(Results[13]));		 * nlapiSubmitField('job', Project, 'custentity_tcost', TotalCost); var		 * NetProfit=parseFloat(SearchResult[0].getValue(Results[14]))		 * nlapiSubmitField('job', Project, 'custentity_contract_p',NetProfit);		 * //np margin=np/(np+totalCost)		 * 		 * var npMargin=(100*parseFloat(SearchResult[0].getValue(Results[14])) /		 * (parseFloat(SearchResult[0].getValue(Results[14])) +		 * parseFloat(SearchResult[0].getValue(Results[13])))).toString(); if		 * (isNaN(npMargin)) { vals[14] = 0; nlapiSubmitField('job', Project,		 * 'custentity_net_margin_p', 0); } else { vals[14] = npMargin +'%';		 * //nlapiLogExecution("DEBUG", "np margin1",npMargin);		 * nlapiSubmitField('job', Project, 'custentity_net_margin_p',npMargin		 * +'%'); } nlapiSubmitField('job', Project,		 * 'custentity_contract_total', (TotalCost+NetProfit)); //kyle 20120514		 * separate cost nlapiSubmitField('job', Project,		 * 'custentity_import_tax_cost',		 * parseFloat(SearchResult[0].getValue(Results[15])));		 * nlapiSubmitField('job', Project, 'custentity_logistic_cost',		 * parseFloat(SearchResult[0].getValue(Results[16])));		 * nlapiSubmitField('job', Project, 'custentity_gp_forsales',		 * parseFloat(SearchResult[0].getValue(Results[17]))); //kyle 20120514		 * separate cost		 */	}	// for update main quotation number and change order numbers	var Columns = new Array();	Columns[0] = new nlobjSearchColumn('tranid', 'transaction');	Columns[1] = new nlobjSearchColumn('custbody_main_quotation', 'transaction');	Columns[1].setSort('T');	var NumberResult = nlapiSearchRecord('job', null, Filtes, Columns);	if (NumberResult != null) {		nlapiSubmitField('job', Project, 'custentity_project_main_quotation',				NumberResult[0].getValue(Columns[0]));		// only have main quotation, no change order		if (NumberResult.length == 1) {			nlapiLogExecution("DEBUG", "no change order");			return true;		}		// have main and change orders		else {			var l = '';			for (var i = 1; i < NumberResult.length; i++) {				l += NumberResult[i].getValue(Columns[0]) + ',';			}			if (l != null && l != "" && l.lastIndexOf(",") == l.length - 1) {				l = l.substr(0, l.length - 1)			}			nlapiLogExecution("DEBUG", "change order", l);			nlapiSubmitField('job', Project, 'custentity_project_change_order',					l);			return true;		}	}	// }}// after copy, use this to renewfunction RenewPurchasePrice(type, form) {	var fields = [ 'cost', 'custitem18', 'custitem_logistics_fee_rate' ];	nlapiSetFieldValue('custbody_salesmanagerapproval', 'F');	var ItemNo = nlapiGetLineItemCount('item');	for (i = 1; i <= ItemNo; i++) {		var ItemID = nlapiGetLineItemValue('item', 'item', i);		// var ItemType=nlapiGetLineItemValue('item','type',i);		if (ItemID == '8209' || ItemID == '8703' || ItemID == '6272'				|| ItemID == '7529' || ItemID == '4296' || ItemID == '5647'				|| ItemID == '5030' || ItemID == '9197' || ItemID == '9159'				|| ItemID == '8351' || ItemID == '6290' || ItemID == '-3') {			// return true;		} else {			var cols = nlapiLookupField('item', ItemID, fields);			if (!cols) {				continue;			}			var PurchasePrice = cols.cost;			var ImportTaxRate = cols.custitem18;			var ImportLogisticsFee = cols.custitem_logistics_fee_rate;			nlapiSetLineItemValue('item', 'custcol_pprice', i, PurchasePrice);			nlapiSetLineItemValue('item', 'custcol_import_tax', i,					ImportTaxRate);			nlapiSetLineItemValue('item', 'custcol_logistics_fee', i,					ImportLogisticsFee);		}	}}function RenewColumn() {	var fields = [ 'cost', 'custitem4', 'custitem5' ];	var ItemNo = nlapiGetLineItemCount('item');	for (i = 1; i <= ItemNo; i++) {		var ItemID = nlapiGetLineItemValue('item', 'item', i);		if (ItemID != '8209' && ItemID != '8703' && ItemID != '6272'				&& ItemID != '7529' && ItemID != '4296' && ItemID != '5647'				&& ItemID != '5030' && ItemID != '9197' && ItemID != '9159'				&& ItemID != '8351' && ItemID != '6290' && ItemID != '-3') {			var cols = nlapiLookupField('item', ItemID, fields);			if (cols) {				var PurchasePrice = cols.cost;				var BasePriceExpirDate = cols.custitem4;				var ItemType = cols.custitem5;				nlapiSetLineItemValue('item', 'custcol_purprice', i,						PurchasePrice);				nlapiSetLineItemValue('item', 'custcol12', i,						BasePriceExpirDate);				nlapiSetLineItemValue('item', 'custcol11', i, ItemType);			}		}	}}